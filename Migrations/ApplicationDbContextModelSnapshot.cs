// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ObaidaAl_NaheelTask_001.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Car", b =>
                {
                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyRate")
                        .HasColumnType("int");

                    b.Property<decimal>("EngineCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarNumber");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerName = "Customer1"
                        },
                        new
                        {
                            Id = 2,
                            CustomerName = "Customer2"
                        },
                        new
                        {
                            Id = 3,
                            CustomerName = "Customer3"
                        });
                });

            modelBuilder.Entity("Models.CustomerCar", b =>
                {
                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("CarNumber", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerCars");
                });

            modelBuilder.Entity("Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("substitDriverId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("substitDriverId")
                        .IsUnique()
                        .HasFilter("[substitDriverId] IS NOT NULL");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DriverName = "driver1"
                        },
                        new
                        {
                            Id = 2,
                            DriverName = "driver2"
                        },
                        new
                        {
                            Id = 3,
                            DriverName = "driver3"
                        });
                });

            modelBuilder.Entity("Models.DriverCar", b =>
                {
                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.HasKey("CarNumber", "DriverId");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverCars");
                });

            modelBuilder.Entity("Models.CustomerCar", b =>
                {
                    b.HasOne("Models.Car", "Car")
                        .WithMany("CustomerCars")
                        .HasForeignKey("CarNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Customer", "Customer")
                        .WithMany("CustomerCars")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Driver", b =>
                {
                    b.HasOne("Models.Driver", "substitute")
                        .WithOne()
                        .HasForeignKey("Models.Driver", "substitDriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("substitute");
                });

            modelBuilder.Entity("Models.DriverCar", b =>
                {
                    b.HasOne("Models.Car", "Car")
                        .WithMany("DriverCars")
                        .HasForeignKey("CarNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Driver", "Driver")
                        .WithMany("DriverCars")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Models.Car", b =>
                {
                    b.Navigation("CustomerCars");

                    b.Navigation("DriverCars");
                });

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Navigation("CustomerCars");
                });

            modelBuilder.Entity("Models.Driver", b =>
                {
                    b.Navigation("DriverCars");
                });
#pragma warning restore 612, 618
        }
    }
}
